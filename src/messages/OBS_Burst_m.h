//
// Generated file, do not edit! Created by nedtool 4.6 from src/messages/OBS_Burst.msg.
//

#ifndef _OBS_BURST_M_H_
#define _OBS_BURST_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/messages/OBS_Burst.msg:26</tt> by nedtool.
 * <pre>
 * // Burst message. Contains a message queue and stores info such as the burst Id (using OMNeT's id() function), number of packets, offsets and destination label.
 * // This message is extended by the OBS_Burst class (OBS_Burst.cc and .h) which implements methods to access the message queue.
 * packet OBS_Burst
 * {
 *     @customize(true); //Use this to extend this message with a subclass
 *     cQueue messages; //Message queue
 *     int numPackets = -1; //Number of packets inside the burst
 *     simtime_t minOffset = -1; //Minimum offset between BCP and Burst
 *     simtime_t maxOffset = -1; //Maximum offset between BCP and burst  
 *     int burstifierId = -1; //Burstifier id
 *     int numSeq = -1; //Sequence number into burst sender
 *     int senderId = -1; //Burst sender identifier. Should not be used as Id
 * }
 * </pre>
 *
 * OBS_Burst_Base is only useful if it gets subclassed, and OBS_Burst is derived from it.
 * The minimum code to be written for OBS_Burst is the following:
 *
 * <pre>
 * class OBS_Burst : public OBS_Burst_Base
 * {
 *   private:
 *     void copy(const OBS_Burst& other) { ... }

 *   public:
 *     OBS_Burst(const char *name=NULL, int kind=0) : OBS_Burst_Base(name,kind) {}
 *     OBS_Burst(const OBS_Burst& other) : OBS_Burst_Base(other) {copy(other);}
 *     OBS_Burst& operator=(const OBS_Burst& other) {if (this==&other) return *this; OBS_Burst_Base::operator=(other); copy(other); return *this;}
 *     virtual OBS_Burst *dup() const {return new OBS_Burst(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from OBS_Burst_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(OBS_Burst);
 * </pre>
 */
class OBS_Burst_Base : public ::cPacket
{
  protected:
    cQueue messages_var;
    int numPackets_var;
    simtime_t minOffset_var;
    simtime_t maxOffset_var;
    int burstifierId_var;
    int numSeq_var;
    int senderId_var;

  private:
    void copy(const OBS_Burst_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OBS_Burst_Base&);
    // make constructors protected to avoid instantiation
    OBS_Burst_Base(const char *name=NULL, int kind=0);
    OBS_Burst_Base(const OBS_Burst_Base& other);
    // make assignment operator protected to force the user override it
    OBS_Burst_Base& operator=(const OBS_Burst_Base& other);

  public:
    virtual ~OBS_Burst_Base();
    virtual OBS_Burst_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class OBS_Burst");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual cQueue& getMessages();
    virtual const cQueue& getMessages() const {return const_cast<OBS_Burst_Base*>(this)->getMessages();}
    virtual void setMessages(const cQueue& messages);
    virtual int getNumPackets() const;
    virtual void setNumPackets(int numPackets);
    virtual simtime_t getMinOffset() const;
    virtual void setMinOffset(simtime_t minOffset);
    virtual simtime_t getMaxOffset() const;
    virtual void setMaxOffset(simtime_t maxOffset);
    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);
    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);
    virtual int getSenderId() const;
    virtual void setSenderId(int senderId);
};


#endif // ifndef _OBS_BURST_M_H_


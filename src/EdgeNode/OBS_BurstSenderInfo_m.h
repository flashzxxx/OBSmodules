//
// Generated file, do not edit! Created by nedtool 4.6 from src/EdgeNode/OBS_BurstSenderInfo.msg.
//

#ifndef _OBS_BURSTSENDERINFO_M_H_
#define _OBS_BURSTSENDERINFO_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/EdgeNode/OBS_BurstSenderInfo.msg:23</tt> by nedtool.
 * <pre>
 * // Additional burst control info included in OBS_BurstSender's automessages.
 * class OBS_BurstSenderInfo
 * {
 *     int burstId = -1; // Internal burst Id used only by sender module. This is independent for any other Id.
 *     int burstifierId = -1; // Burstifier Id. Part of burst identifier.
 *     int numSeq = -1; // Sequence number. The other part of burst identifier.
 *     int assignedLambda = -1; // Assigned lambda.
 *     int label = -1; // Destination label.
 *       //simtime_t time; // Message creation timestamp. Used to insert into BCP's sender queue.
 * }
 * </pre>
 */
class OBS_BurstSenderInfo : public ::cObject
{
  protected:
    int burstId_var;
    int burstifierId_var;
    int numSeq_var;
    int assignedLambda_var;
    int label_var;

  private:
    void copy(const OBS_BurstSenderInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OBS_BurstSenderInfo&);

  public:
    OBS_BurstSenderInfo();
    OBS_BurstSenderInfo(const OBS_BurstSenderInfo& other);
    virtual ~OBS_BurstSenderInfo();
    OBS_BurstSenderInfo& operator=(const OBS_BurstSenderInfo& other);
    virtual OBS_BurstSenderInfo *dup() const {return new OBS_BurstSenderInfo(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getBurstId() const;
    virtual void setBurstId(int burstId);
    virtual int getBurstifierId() const;
    virtual void setBurstifierId(int burstifierId);
    virtual int getNumSeq() const;
    virtual void setNumSeq(int numSeq);
    virtual int getAssignedLambda() const;
    virtual void setAssignedLambda(int assignedLambda);
    virtual int getLabel() const;
    virtual void setLabel(int label);
};

inline void doPacking(cCommBuffer *b, OBS_BurstSenderInfo& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, OBS_BurstSenderInfo& obj) {obj.parsimUnpack(b);}


#endif // ifndef _OBS_BURSTSENDERINFO_M_H_

